package compilador;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

public class Interfaz extends javax.swing.JFrame {

    ArrayList<Integer> numeroMaxino = new ArrayList<>();
    ArrayList<Integer> numeroMaxinoForV = new ArrayList<>();
    int numeroMaxinoIfV = 0;
    private JFileChooser jfc;
    private FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos con extensión .lda", "lda");
    private FileOutputStream output; //flujo de salida de datos
    private FileInputStream input; //flujo de entrada de datos
    private NumeroLinea numeroLinea;
    private String ruta = "";
    int numeroLineaError = 1;
    boolean banderaError = false;
    Stack<String> pilaSintactica = new Stack<String>();
    Stack<String> pilaDeIncrementos = new Stack<String>();
    private DefaultTableModel TablaSintactica, TablaExpresiones, TablaVariables;
    int Renglon = 0;
    int Columna = 0;
    int penultimo = 0;
    String accion;
    ArrayList<String> codigo = new ArrayList<String>();
    int LineaAnalisisSemanticoLlenadoMatrizElemtos = 1;
    HashMap<String, List<Integer>> mapaVariables = new HashMap<>();
    ArrayList<String> expresionInfija = new ArrayList<String>();
    ArrayList<String> expresionPofija = new ArrayList<String>();
    ArrayList<String> exprecionOperadorRelacional = new ArrayList<String>();
    ArrayList<String> variableTemporalIF = new ArrayList<>();
    ArrayList<String> variableTemporalIF2 = new ArrayList<>();

    String[] ProducionIzquierda = {"Prog'", "Prog", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Sentencias", "Dec", "Tipo", "Tipo", "Tipo", "Tipo", "V", "V", "Asig", "S", "S", "S", "E", "E", "E", "T", "T", "T", "F", "F", "F", "F", "F", "If", "Else", "Else", "Condicion", "OpRel", "OpRel", "OpRel", "OpRel", "OpRel", "OpRel", "Bucle-for", "ExIncre", "ExIncre", "Read", "Imprimir", "Msj", "Msj", "OtroMsj", "OtroMsj",};
    String[] ProducionDerecha = {"ACEPTA", "Programa id { Sentencias }", "Dec", "Asig Sentencias", "Imprimir", "Read", "If Sentencias", "Bucle-for Sentencias", "ε", "Tipo id V", "float", "int", "char", "String", ", id V", "; Sentencias", "id = S ;", "+ E", "- E", "E", "E + T", "E - T", "T", "T * F", "T / F", "F", "( E )", "id", "num", "litCad", "litCar", "if ( Condicion ) { Sentencias } Else", "else { Sentencias }", "ε", "E OpRel E", "<", ">", "==", "!=", "<=", ">=", "for ( Asig Condicion ; id ExIncre ) { Sentencias }", "++", "--", "read ( id ) ; Sentencias", "print [ Msj ] ; Sentencias", "litCad OtroMsj", "id OtroMsj", "+ Msj", "ε"};
    int NumPops[] = {2, 10, 2, 4, 2, 2, 4, 4, 0, 6, 2, 2, 2, 2, 6, 4, 8, 4, 4, 2, 6, 6, 2, 6, 6, 2, 6, 2, 2, 2, 2, 16, 8, 0, 6, 2, 2, 2, 2, 2, 2, 22, 2, 2, 12, 12, 4, 4, 4, 0};

    String Renglones[] = {"Q0", "Q1", "Q2", "Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9", "Q10", "Q11", "Q12", "Q13", "Q14", "Q15", "Q16", "Q17", "Q18", "Q19", "Q20", "Q21", "Q22", "Q23", "Q24", "Q25", "Q26", "Q27", "Q28", "Q29", "Q30", "Q31", "Q32", "Q33", "Q34", "Q35", "Q36", "Q37", "Q38", "Q39", "Q40", "Q41", "Q42", "Q43", "Q44", "Q45", "Q46", "Q47", "Q48", "Q49", "Q50", "Q51", "Q52", "Q53", "Q54", "Q55", "Q56", "Q57", "Q58", "Q59", "Q60", "Q61", "Q62", "Q63", "Q64", "Q65", "Q66", "Q67", "Q68", "Q69", "Q70", "Q71", "Q72", "Q73", "Q74", "Q75", "Q76", "Q77", "Q78", "Q79", "Q80", "Q81", "Q82", "Q83", "Q84", "Q85", "Q86", "Q87", "Q88", "Q89", "Q90", "Q91", "Q92", "Q93", "Q94", "Q95", "Q96", "Q97", "Q98", "Q99", "Q100", "Q101", "Q102", "Q103", "Q104", "Q105"};
    String Columnas[] = {"Programa", "id", "{", "}", "float", "int", "char", "String", ",", ";", "=", "+", "-", "*", "/", "(", ")", "num", "litCad", "litCar", "if", "else", "<", ">", "==", "!=", "<=", ">=", "for", "++", "--", "read", "print", "[", "]", "$", "Prog", "Sentencias", "Dec", "Tipo", "V", "Asig", "S", "E", "T", "F", "If", "Else", "Condicion", "OpRel", "Bucle-for", "ExIncre", "Read", "Imprimir", "Msj", "OtroMsj"};

    String matrizSintactica[][] = {
        {"Q2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "ACEPTA", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "Q4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q5", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "0", "0", "Q22", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q23", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "0", "0", "P4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P5", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q24", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q25", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "Q26", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q27", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q28", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q29", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q30", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q31", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P10", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P11", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P12", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P6", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "Q33", "Q34", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q32", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q36", "Q37", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q35", "Q38", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q47", "Q48", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q46", "0"},
        {"0", "Q49", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q51", "Q39", "Q40", "0", "0", "Q50", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q52", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P9", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q53", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q54", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q55", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q56", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q57", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P19", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P22", "0", "P22", "P22", "Q60", "Q61", "0", "P22", "0", "0", "0", "0", "0", "P22", "P22", "P22", "P22", "P22", "P22", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P25", "0", "P25", "P25", "P25", "P25", "0", "P25", "0", "0", "0", "0", "0", "P25", "P25", "P25", "P25", "P25", "P25", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q62", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P27", "0", "P27", "P27", "P27", "P27", "0", "P27", "0", "0", "0", "0", "0", "P27", "P27", "P27", "P27", "P27", "P27", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P28", "0", "P28", "P28", "P28", "P28", "0", "P28", "0", "0", "0", "0", "0", "P28", "P28", "P28", "P28", "P28", "P28", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P29", "0", "P29", "P29", "P29", "P29", "0", "P29", "0", "0", "0", "0", "0", "P29", "P29", "P29", "P29", "P29", "P29", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P30", "0", "P30", "P30", "P30", "P30", "0", "P30", "0", "0", "0", "0", "0", "P30", "P30", "P30", "P30", "P30", "P30", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q63", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q65", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P49", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q64"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q65", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P49", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q66"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q67", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q68", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q70", "Q71", "Q72", "Q73", "Q74", "Q75", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q69", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q51", "Q39", "Q40", "0", "0", "Q76", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "Q33", "Q34", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q77", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P16", "0", "P16", "P16", "P16", "P16", "P16", "0", "0", "0", "0", "0", "0", "0", "P16", "0", "P16", "P16", "P16", "P16", "0", "0", "0", "0", "0", "0", "0", "P16", "0", "0", "P16", "P16", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P17", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P18", "0", "Q58", "Q59", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q78", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q79", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q80", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q81", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q58", "Q59", "0", "0", "0", "Q82", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q83", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P46", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q48", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q47", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q84", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P47", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q85", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "Q86", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q41", "0", "Q43", "Q44", "Q45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q87", "Q39", "Q40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P35", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P35", "0", "P35", "P35", "P35", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P36", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P36", "0", "P36", "P36", "P36", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P37", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P37", "0", "P37", "P37", "P37", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P38", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P38", "0", "P38", "P38", "P38", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P39", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P39", "0", "P39", "P39", "P39", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P40", "0", "P40", "P40", "P40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "Q88", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P14", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P20", "0", "P20", "P20", "Q60", "Q61", "0", "P20", "0", "0", "0", "0", "0", "P20", "P20", "P20", "P20", "P20", "P20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P21", "0", "P21", "P21", "Q60", "Q61", "0", "P21", "0", "0", "0", "0", "0", "P21", "P21", "P21", "P21", "P21", "P21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P23", "0", "P23", "P23", "P23", "P23", "0", "P23", "0", "0", "0", "0", "0", "P23", "P23", "P23", "P23", "P23", "P23", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P24", "0", "P24", "P24", "P24", "P24", "0", "P24", "0", "0", "0", "0", "0", "P24", "P24", "P24", "P24", "P24", "P24", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P26", "0", "P26", "P26", "P26", "P26", "0", "P26", "0", "0", "0", "0", "0", "P26", "P26", "P26", "P26", "P26", "P26", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q89", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P48", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q90", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q91", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "P34", "0", "Q58", "Q59", "0", "0", "0", "P34", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q92", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P45", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "P44", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "Q93", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q95", "Q96", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q94", "0", "0", "0", "0"},
        {"0", "P33", "0", "P33", "P33", "P33", "P33", "P33", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P33", "Q98", "0", "0", "0", "0", "0", "0", "P33", "0", "0", "P33", "P33", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q97", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q99", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P42", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P43", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P31", "0", "P31", "P31", "P31", "P31", "P31", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P31", "0", "0", "0", "0", "0", "0", "0", "P31", "0", "0", "P31", "P31", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "Q100", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "Q101", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q102", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "Q13", "0", "P8", "Q18", "Q19", "Q20", "Q21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "Q16", "0", "0", "0", "0", "0", "0", "0", "Q17", "0", "0", "Q15", "Q14", "0", "0", "0", "0", "Q103", "Q6", "Q12", "0", "Q7", "0", "0", "0", "0", "Q10", "0", "0", "0", "Q11", "0", "Q9", "Q8", "0", "0"},
        {"0", "0", "0", "Q104", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "Q105", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P32", "0", "P32", "P32", "P32", "P32", "P32", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P32", "0", "0", "0", "0", "0", "0", "0", "P32", "0", "0", "P32", "P32", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "P41", "0", "P41", "P41", "P41", "P41", "P41", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "P41", "0", "0", "0", "0", "0", "0", "0", "P41", "0", "0", "P41", "P41", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"}

    };

    public Interfaz() {
        initComponents();
        setIconImage(getIconImage());
        colors();
        numeroLinea = new NumeroLinea(txtCodigoFuente);
        jScrollPane8.setRowHeaderView(numeroLinea);
        txtCodigoFuente.setEnabled(false);
        txtCodigoFuente.setText("");
        txtConsola.setText("");
        txtComponentes.setText("");
        btnNuevo.setEnabled(true);
        btnAbrir.setEnabled(true);
        btnGuardar.setEnabled(false);
        btnGuardarComo.setEnabled(false);
        ruta = "";
        TablasModelo();
    }
    
        private int findLastNonWordChar(String text, int index) 
    {
        while (--index >= 0)
        {
            //  \\W = [A-Za-Z0-9]
            if (String.valueOf(text.charAt(index)).matches("\\W")) 
            {
                break;
            }
        }
        return index;
    }

    //METODO PARA ENCONTRAR LAS PRIMERAS CADENAS 
    private int findFirstNonWordChar(String text, int index) 
    {
        while (index < text.length()) 
        {
            if (String.valueOf(text.charAt(index)).matches("\\W")) 
            {
                break;
            }
            index++;
        }
        return index;
    }

    //METODO PARA PINTAS LAS PALABRAS RESEVADAS
    private void colors() 
    {
        final StyleContext cont = StyleContext.getDefaultStyleContext();
        //COLORES 
        final AttributeSet attred = new SimpleAttributeSet();
        StyleConstants.setForeground((MutableAttributeSet) attred, new Color(255, 0, 35));
        StyleConstants.setBold((MutableAttributeSet) attred, true);

        final AttributeSet attgreen = new SimpleAttributeSet();
        StyleConstants.setForeground((MutableAttributeSet) attgreen, new Color(71, 161, 64));
        StyleConstants.setBold((MutableAttributeSet) attgreen, true);
        
        final AttributeSet attblue = new SimpleAttributeSet();
        StyleConstants.setForeground((MutableAttributeSet) attblue, new Color(31, 157, 201));
        StyleConstants.setBold((MutableAttributeSet) attblue, true);
        
        final AttributeSet attblack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0));
        //ESTILOS
        DefaultStyledDocument doc = new DefaultStyledDocument() 
        {
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException 
            {
                super.insertString(offset, str, a);
                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                if (before < 0) 
                {
                    before = 0;
                }
                int after = findFirstNonWordChar(text, offset + str.length());
                int wordL = before;
                int wordR = before;

                while (wordR <= after) 
                {
                    if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) 
                    {
                        if (text.substring(wordL, wordR).matches("(\\W)*(if|else|for|read|print)")) 
                        {
                            setCharacterAttributes(wordL, wordR - wordL, attblue, false);
                        } 
                        else if (text.substring(wordL, wordR).matches("(\\W)*(int|string|char|float)")) 
                        {
                            setCharacterAttributes(wordL, wordR - wordL, attgreen, false);
                        }
                        else if(text.substring(wordL, wordR).matches("(\\W)*(Programa)"))
                        {
                             setCharacterAttributes(wordL,wordR - wordL, attred, false);
                        }
                        else 
                        {
                            setCharacterAttributes(wordL, wordR - wordL, attblack, false);
                        }
                        wordL = wordR;

                    }
                    wordR++;
                }
            }

            public void romeve(int offs, int len) throws BadLocationException 
            {
                super.remove(offs, len);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                if (before < 0) 
                {
                    before = 0;
                }
            }
        };
        JTextPane txt = new JTextPane(doc);
        String temp = txtCodigoFuente.getText();
        txtCodigoFuente.setStyledDocument(txt.getStyledDocument());
        txtCodigoFuente.setText(temp);
    }


    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/robot.png"));
        return retValue;
    }

    public void TablasModelo() {

        pilaSintactica.push("$");
        pilaSintactica.push("Q0");
        TablaSintactica = new DefaultTableModel();
        TablaSintactica.addColumn("Entrada");
        TablaSintactica.addColumn("Pila");
        TablaSintactica.addColumn("Accion");
        tablaSintactica.setModel(TablaSintactica);

        TablaExpresiones = new DefaultTableModel();
        TablaExpresiones.addColumn("Expresion infija");
        TablaExpresiones.addColumn("Expresion posfija");
        tablaExpresiones.setModel(TablaExpresiones);

        TablaVariables = new DefaultTableModel();
        TablaVariables.addColumn("Variable");
        TablaVariables.addColumn("Tipo");

        tablaVariables.setModel(TablaVariables);

    }

    private void Lexico() {
        try {
            File temporal = new File("temporal.jha");
            output = new FileOutputStream(temporal);
            output.write(txtCodigoFuente.getText().getBytes());
            output.close();
            Reader lector = new BufferedReader(new FileReader(temporal));
            Lexer lexer = new Lexer(lector);

            while (true) {
                Tokens token = lexer.yylex();
                if (token == null) {
                    AnalisisSintactico("$", numeroLineaError, lexer.lexeme);
                    return;
                }

                switch (token) {
                    case salto:
                        txtComponentes.setText(txtComponentes.getText() + "\n");
                        numeroLineaError = numeroLineaError + 1;
                        break;

                    case reservada:
                    case coma:
                    case finSentencia:
                    case aritmetico:
                    case agrupacion:
                    case asignacion:
                    case relacional:
                    case igual:
                    case dif:
                    case mayIgual:
                    case menIgual:
                    case incr:
                    case decr:

                        txtComponentes.setText(txtComponentes.getText() + lexer.lexeme + " ");
                        AnalisisSintactico(lexer.lexeme, numeroLineaError, lexer.lexeme);
                        break;

                    case ERROR:

                        txtConsola.setText(txtConsola.getText() + "ERROR Lexico linea " + numeroLineaError + ": Token " + lexer.lexeme + " no reconocido \n");
                        banderaError = true;
                        break;
                    case ERRORLCAD:

                        txtConsola.setText(txtConsola.getText() + "ERROR Lexico linea " + numeroLineaError + ": Se esperaban comillas \n");
                        banderaError = true;
                        break;
                    case ERRORLCAR:

                        txtConsola.setText(txtConsola.getText() + "ERROR Lexico linea " + numeroLineaError + ": Se esperaban comillas simples\n");
                        banderaError = true;
                        break;
                    default:

                        txtComponentes.setText(txtComponentes.getText() + token + " ");
                        AnalisisSintactico(token + "", numeroLineaError, lexer.lexeme);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void AnalisisSintactico(String Token, int numLin, String ValorToken) {

        if (banderaError) {
            accion = matrizSintactica[Renglon()][Columna(Token)];

            if (accion.startsWith("Q")) {

                TablaSintactica.addRow(new Object[]{Token, pilaSintactica.toString(), " Desplaza " + Token + " a " + accion});

                pilaSintactica.push(Token);
                pilaSintactica.push(accion);

            } else if (accion.startsWith("P")) {

                String accionComoString = accion.replaceAll("[^0-9]", "");
                int produccionNumero = Integer.parseInt(accionComoString);

                TablaSintactica.addRow(new Object[]{Token, pilaSintactica.toString(), " Produccion " + accion + " = " + ProducionIzquierda[produccionNumero] + "->" + ProducionDerecha[produccionNumero]});

                for (int i = 0; i < NumPops[produccionNumero]; i++) {
                    pilaSintactica.pop();
                }

                pilaSintactica.push(ProducionIzquierda[produccionNumero]);

                accion = matrizSintactica[penultimo()][Columna(pilaSintactica.peek())];
                pilaSintactica.push(accion);

                AnalisisSintactico(Token, numLin, ValorToken);

            } else if (accion == "0") {

                txtConsola.setText(txtConsola.getText() + "ERROR linea " + numLin + ": Se encontró un token inesperado :" + Token + "\n");

                accion = matrizSintactica[Renglon()][Columna(Token)];

                String SeEsperaba = "";

                for (int i = 0; i < 23; i++) {
                    accion = matrizSintactica[CadenaAEntero(pilaSintactica.peek())][i];

                    if (!accion.equals("0")) {

                        switch (Columnas[i]) {

                            case "V":
                                SeEsperaba = SeEsperaba + ", ; ";
                                break;
                            case "S":
                                SeEsperaba = SeEsperaba + "+ - id num litCad litCar ";
                                break;
                            case "E":
                                SeEsperaba = SeEsperaba + "( id num litCad litCar ";
                                break;
                            case "T":
                                SeEsperaba = SeEsperaba + "( id num litCad litCar ";
                                break;
                            case "F":
                                SeEsperaba = SeEsperaba + "( id num litCad litCar ";
                                break;
                            case "Prog":
                                SeEsperaba = SeEsperaba + "Programa ";
                                break;

                            case "Sentencias":
                                SeEsperaba = SeEsperaba + "float int char String id print read if for ";
                                break;

                            case "Dec":
                                SeEsperaba = SeEsperaba + "float int char String ";
                                break;

                            case "Tipo":
                                SeEsperaba = SeEsperaba + "float int char String ";
                                break;

                            case "If":
                                SeEsperaba = SeEsperaba + "if ";
                                break;

                            case "Else":
                                SeEsperaba = SeEsperaba + "else ";
                                break;

                            case "Condicion":
                                SeEsperaba = SeEsperaba + "( id num litCad litCar ";
                                break;

                            case "OpRel":
                                SeEsperaba = SeEsperaba + "< > == != <= >= ";
                                break;

                            case "Bucle-for":
                                SeEsperaba = SeEsperaba + "for ";
                                break;

                            case "ExIncre":
                                SeEsperaba = SeEsperaba + "++ -- ";
                                break;

                            case "Read":
                                SeEsperaba = SeEsperaba + "read ";
                                break;

                            case "Imprimr":
                                SeEsperaba = SeEsperaba + "print ";
                                break;

                            case "Msj":
                                SeEsperaba = SeEsperaba + "litCad id + ";
                                break;

                            case "Asig":
                                SeEsperaba = SeEsperaba + "id ";
                                break;
                            case "P":
                                SeEsperaba = SeEsperaba + "int float char id ";
                                break;
                            default:
                                SeEsperaba = SeEsperaba + Columnas[i] + " ";
                        }
                    }
                }

                txtConsola.setText(txtConsola.getText() + "ERROR sintactico linea " + numLin + ": Se esperaba  ->    " + eliminarElementosRepetidosEnSeEsperaba(SeEsperaba) + "\n");
                banderaError = false;

            } else if (accion == "ACEPTA") {
                TablaSintactica.addRow(new Object[]{Token, pilaSintactica.toString(), accion});
            }
        }
    }

    public void AnalisisSemanticoLlenadoMatrizElemtos() throws IOException {
        File temporal = new File("temporal.jha");
        output = new FileOutputStream(temporal);
        output.write(txtCodigoFuente.getText().getBytes());
        output.close();
        Reader lector = new BufferedReader(new FileReader(temporal));
        Lexer lexer = new Lexer(lector);

        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                return;
            }
            switch (token) {
                case salto:
                    LineaAnalisisSemanticoLlenadoMatrizElemtos++;
                    break;
                default:
                    codigo.add(lexer.lexeme + " " + token + " " + LineaAnalisisSemanticoLlenadoMatrizElemtos);
            }
        }
    }

    public void AnalisisSemanticoVariables() {

        errorCorregidoPorCodigo();
        ArrayList<String> entradaExprecion = new ArrayList<String>();
        int tipoDato = 0;
        String cadena;
        String[] elementos;
        String entrada, entrada2;
        String lexema;
        String linea;
        int contador = 3;

        for (int i = 0; i < codigo.size(); i++) {

            cadena = codigo.get(i);
            elementos = cadena.split(" ");
            entrada = elementos[0];

            if (entrada.equals("int") || entrada.equals("float") || entrada.equals("char") || entrada.equals("String")) {
                switch (entrada) {
                    case "int" ->
                        tipoDato = 0;
                    case "float" ->
                        tipoDato = 1;
                    case "char" ->
                        tipoDato = 2;
                    case "String" ->
                        tipoDato = 3;
                }

                do {
                    i++;
                    cadena = codigo.get(i);
                    elementos = cadena.split(" ");

                    entrada2 = elementos[0];
                    lexema = elementos[1];
                    linea = elementos[2];

                    switch (lexema) {
                        case "id":
                            boolean existeVariable = mapaVariables.containsKey(entrada2);
                            if (existeVariable) {
                                txtConsola.setText(txtConsola.getText() + "ERROR semantico: Ya existe la veriable \"" + entrada2 + "\" en la linea: " + linea + "\n");
                                banderaError = false;
                            } else {
                                mapaVariables.computeIfAbsent(entrada2, k -> new ArrayList<>()).add(tipoDato);
                                mapaVariables.computeIfAbsent(entrada2, k -> new ArrayList<>()).add(null);//valor de la variable
                                mapaVariables.computeIfAbsent(entrada2, k -> new ArrayList<>()).add(Integer.parseInt(linea));//numero de linea
                                TablaVariables.addRow(new Object[]{entrada2, tipoDato});
                            }
                            break;
                        default:
                    }
                } while (!entrada2.equals(";"));
            }
        }
        for (int a = contador; a < codigo.size(); a++) {

            cadena = codigo.get(a);
            elementos = cadena.split(" ");
            entrada = elementos[0];
            lexema = elementos[1];
            linea = elementos[2];
            entradaExprecion.add(entrada);

            if (lexema.equals("id")) {
                boolean existeVariable = mapaVariables.containsKey(entrada);
                if (existeVariable == false) {
                    txtConsola.setText(txtConsola.getText() + "ERROR semantico: No esta declarada la variable  " + entrada + " (error en la linea: " + linea + ")\n");
                    banderaError = false;

                }

            }

        }

    }

    public void errorCorregidoPorCodigo() {
        String cadena, entrada, lexema, entrada2, datoTemporal = "", linea, expresionTemporal = "", resultado;
        String[] elementos;
        for (int i = 0; i < codigo.size(); i++) {
            cadena = codigo.get(i);
            elementos = cadena.split(" ");

            entrada = elementos[0];
            lexema = elementos[1];
            linea = elementos[2];

            if (entrada.equals("<") || entrada.equals(">") || entrada.equals("==") || entrada.equals("!=") || entrada.equals("<=") || entrada.equals(">=")) {
                String entString = entrada;
                cadena = codigo.get(i - 1);
                elementos = cadena.split(" ");
                entrada = elementos[0];
                lexema = elementos[1];

                String tem1 = lexema;
                String ent1 = entrada;

                cadena = codigo.get(i + 1);
                elementos = cadena.split(" ");
                entrada = elementos[0];
                lexema = elementos[1];

                String tem2 = lexema;
                String ent2 = entrada;

                cadena = codigo.get(i - 2);
                elementos = cadena.split(" ");
                entrada = elementos[0];

                String tem1S = entrada;

                cadena = codigo.get(i + 2);
                elementos = cadena.split(" ");
                entrada = elementos[0];

                String tem2S = entrada;

                resultado = (tem1S + tem1 + tem2 + tem2S);

                if (resultado.equals("(idid)") || resultado.equals(";idid;")) {
                    exprecionOperadorRelacional.add(ent1);
                    exprecionOperadorRelacional.add(entString);
                    exprecionOperadorRelacional.add(ent2);
                    exprecionOperadorRelacional.add(linea);
                } else {
                    txtConsola.setText(txtConsola.getText() + "ERROR sintactico linea " + linea + ": Se esperaba en la condicion del ciclo la estructura -> ( id OpRel id )\n");
                    banderaError = false;
                }

            }

        }
    }
    ArrayList<String> condigoParaCodigoIntermedio = new ArrayList<>();

    public void codigoIntermedio() {

        try {
            File temporal = new File("temporal.jha");
            output = new FileOutputStream(temporal);
            output.write(txtCodigoFuente.getText().getBytes());
            output.close();
            Reader lector = new BufferedReader(new FileReader(temporal));
            Lexer lexer = new Lexer(lector);
            while (true) {
                Tokens token = lexer.yylex();
                String tk = token + "";
                if (token == null) {
                    return;
                }
                switch (token) {
                    case salto:

                        break;
                    default:
                        condigoParaCodigoIntermedio.add(tk);
                        condigoParaCodigoIntermedio.add(lexer.lexeme);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void codigoIntermedioVariablesTemporales(ArrayList<String> exprecion, String priVariable) {
        java.util.Stack<String> pilaCodIn = new java.util.Stack<String>();
        int IndiceVariablesTemporales = 1;

        for (int i = 0; i < exprecion.size(); i++) {
            String elemento = exprecion.get(i);

            switch (elemento) {
                case "+":

                case "-":

                case "/":
                case "*":

                    String elemento1 = pilaCodIn.pop();
                    IndiceVariablesTemporales = IndiceVariablesTemporales - 1;
                    String elemento2 = pilaCodIn.pop();
                    IndiceVariablesTemporales = IndiceVariablesTemporales - 1;
                    pilaCodIn.push("V" + IndiceVariablesTemporales);
                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + pilaCodIn.peek() + " = " + elemento2 + elemento + elemento1 + ";\n");
                    IndiceVariablesTemporales = IndiceVariablesTemporales + 1;
                    numeroMaxino.add(IndiceVariablesTemporales);
                    break;
                default:
                    pilaCodIn.push("V" + IndiceVariablesTemporales);
                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + pilaCodIn.peek() + " = " + elemento + ";\n");
                    IndiceVariablesTemporales++;
                    numeroMaxino.add(IndiceVariablesTemporales);
            }
        }
        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + priVariable + " = " + pilaCodIn.peek() + ";\n");
    }

    public void codigoIntermedioVariablesTemporalesFor(ArrayList<String> exprecion, String priVariable) {

        java.util.Stack<String> pilaCodIn = new java.util.Stack<String>();
        int IndiceVariablesTemporales = 1;
        for (int i = 0; i < exprecion.size(); i++) {
            String elemento = exprecion.get(i);

            switch (elemento) {
                case "+":

                case "-":

                case "/":
                case "*":

                    String elemento1 = pilaCodIn.pop();
                    IndiceVariablesTemporales = IndiceVariablesTemporales - 1;
                    String elemento2 = pilaCodIn.pop();
                    IndiceVariablesTemporales = IndiceVariablesTemporales - 1;

                    pilaCodIn.push("VFr" + IndiceVariablesTemporales);

                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + pilaCodIn.peek() + " = " + elemento2 + elemento + elemento1 + ";\n");

                    IndiceVariablesTemporales = IndiceVariablesTemporales + 1;
                    numeroMaxinoForV.add(IndiceVariablesTemporales);
                    break;

                default:

                    pilaCodIn.push("VFr" + IndiceVariablesTemporales);

                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + pilaCodIn.peek() + " = " + elemento + ";\n");
                    IndiceVariablesTemporales++;
                    numeroMaxinoForV.add(IndiceVariablesTemporales);

            }

        }

        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + priVariable + " = " + pilaCodIn.peek() + ";\n");

    }

    public void declaracionDeVariablesTemporales() {

        String restoCodigo = obtenerImports();
        txtCodigoIntermedio.setText("");

        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "#include <stdio.h> \n");
        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "int main() { \n");

        if (!numeroMaxino.isEmpty()) {

            for (int a = 1; a <= (obtenerNumeroMasAlto(numeroMaxino) - 1); a++) {

                txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "float V" + a + ";\n");
            }

        }
        if (!numeroMaxinoForV.isEmpty()) {
            int tem = (obtenerNumeroMasAlto(numeroMaxinoForV) - 1);

            if (tem <= 2) {
                tem = 2;
            }

            for (int a = 1; a <= tem; a++) {

                txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "float VFr" + a + ";\n");
            }
        }

        if (!variableTemporalIF.isEmpty()) {

            for (int i = 0; i < variableTemporalIF.size(); i++) {
                String elemento = variableTemporalIF.get(i);
                String tipo = variableTemporalIF2.get(i);

                switch (tipo) {
                    case "0":
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "int " + elemento + ";\n");
                        break;
                    case "1":
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "float " + elemento + ";\n");
                        break;
                    case "2":
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "char " + elemento + ";\n");
                        break;
                    case "3":
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "char " + elemento + "[100];\n");
                        break;
                    default:
                        break;
                }

            }

        }

        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + restoCodigo);

        for (int i = 1; i < condigoParaCodigoIntermedio.size(); i = i + 2) {

            condigoParaCodigoIntermedio.get(i);

            if (condigoParaCodigoIntermedio.get(i).equals("String")) {

                String includeString = "#include <string.h>\n";
                txtCodigoIntermedio.insert(includeString, 0);

            }

        }

    }

    public String obtenerImports() {
        String contenido = txtCodigoIntermedio.getText();
        String palabraClave = "int main() {";
        String codigo = "";
        int indiceImport = contenido.indexOf(palabraClave);

        if (indiceImport != -1) {
            String imports = contenido.substring(indiceImport + palabraClave.length()).trim();

            codigo = codigo + imports;

        } else {
            System.out.println("No se encontraron imports en el texto.");
        }

        return codigo;
    }

    public void analizarForAsignacion(String codigoFor, int contadorAsignaciones, String valorS) {
        String patronAsignacion = "\\((.*?);";

        // Crear los objetos Pattern y Matcher
        Pattern patron = Pattern.compile(patronAsignacion);
        Matcher matcher = patron.matcher(codigoFor);

        if (matcher.find()) {

        }

        String variable = "";
        String cadena = expresionInfija.get(contadorAsignaciones - 1);

        int posicionEspacio = cadena.indexOf(' ');

        if (posicionEspacio != -1) {
            variable = cadena.substring(0, posicionEspacio);
        } else {
            System.out.println("No se encontró un espacio en blanco en la cadena.");
        }

        String[] elementos = expresionPofija.get(contadorAsignaciones - 1).split(" ");
        ArrayList<String> arrayListPosfija = new ArrayList<>(Arrays.asList(elementos));
        int dato = tipoDato(variable);
        if (dato == 3) {
            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "strcpy ( " + variable + " , " + valorS + " );\n");
        } else {
            codigoIntermedioVariablesTemporalesFor(arrayListPosfija, variable);
        }

    }

    public void analizarForCondicion(String codigoFor) {
        String patronCondicion = ";(.*?);";

        Pattern patron = Pattern.compile(patronCondicion);
        Matcher matcher = patron.matcher(codigoFor);

        if (matcher.find()) {

            String[] elementos = matcher.group(1).trim().split(" ");

            ArrayList<String> arrayList = new ArrayList<>(Arrays.asList(elementos));

            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr1 = " + arrayList.get(0) + ";\n");
            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr2 = " + arrayList.get(2) + ";\n");
            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr1 = VFr1 " + arrayList.get(1) + " VFr2;\n");
            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! VFr1 )\n");

        }

    }

    public void analizarForIncremento(String codigoFor) {

        String patronIncremento = ";(.*?)\\)";

        Pattern patron = Pattern.compile(patronIncremento);
        Matcher matcher = patron.matcher(codigoFor);

        if (matcher.find()) {
            String incrementoCompleto = matcher.group(1).trim();

            String[] partesIncremento = incrementoCompleto.split("\\s+");
            String incremento = partesIncremento[partesIncremento.length - 2] + " " + partesIncremento[partesIncremento.length - 1];

            pilaDeIncrementos.add(incremento);
        }
    }

    public void codigoIntermedio2() {

        Stack<String> pilaDeLlaves = new Stack<String>();
        ArrayList<String> condicionDelIf = new ArrayList<>();
        ArrayList<String> cosasDelPrint = new ArrayList<>();
        String cadAuxiliarPrint = "";
        boolean banderaDeclaracionVariables = false;
        boolean banderaPrint = false;
        boolean banderaFor = false;
        boolean banderaIgual = false;
        boolean banderaIf = false;
        boolean banderaRead = false;
        int contadorLlaves = 0;
        int contadorfor = 0;
        int contadorAsignaciones = 0;
        String codigoFor = "";
        int conIf = 0, conFlo = 0, conChar = 0, conStr = 0, conG = 0;

        for (int i = 1; i < condigoParaCodigoIntermedio.size(); i = i + 2) {

            if (condigoParaCodigoIntermedio.get(i).equals("Programa")) {

                txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "#include <stdio.h> \n");
                txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "int main() {\n");
            }

            if (condigoParaCodigoIntermedio.get(i).equals("=")) {
                contadorAsignaciones++;
            }

            if (condigoParaCodigoIntermedio.get(i).equals("=") && banderaIgual == false) {

                String variable = "";
                String cadena = expresionInfija.get(contadorAsignaciones - 1);

                // Buscar la posición del espacio en blanco
                int posicionEspacio = cadena.indexOf(' ');

                // Verificar si se encontró el espacio y extraer la subcadena
                if (posicionEspacio != -1) {
                    variable = cadena.substring(0, posicionEspacio);

                } else {
                    System.out.println("No se encontró un espacio en blanco en la cadena.");
                }

                String[] elementos = expresionPofija.get(contadorAsignaciones - 1).split(" ");
                ArrayList<String> arrayListPosfija = new ArrayList<>(Arrays.asList(elementos));
                int dato = tipoDato(variable);
                if (dato == 3) {
                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "strcpy ( " + variable + " , " + condigoParaCodigoIntermedio.get(i + 2) + " );\n");
                } else {
                    codigoIntermedioVariablesTemporales(arrayListPosfija, variable);
                }
            }

            if ((condigoParaCodigoIntermedio.get(i).equals("int") || condigoParaCodigoIntermedio.get(i).equals("float") || condigoParaCodigoIntermedio.get(i).equals("char") || condigoParaCodigoIntermedio.get(i).equals("String")) && banderaDeclaracionVariables == false) {

                // Ordenar el HashMap
                List<Map.Entry<String, List<Integer>>> listaOrdenada = new ArrayList<>(mapaVariables.entrySet());

                // Utilizar un comparador para ordenar por el primer elemento de la lista
                Collections.sort(listaOrdenada, Comparator.comparingInt(entry -> entry.getValue().get(0)));

                for (Map.Entry<String, List<Integer>> entry : listaOrdenada) {

                    switch (entry.getValue().get(0)) {
                        case 0:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "int " + entry.getKey() + ";\n");
                            break;
                        case 1:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "float " + entry.getKey() + ";\n");
                            break;
                        case 2:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "char " + entry.getKey() + ";\n");
                            break;
                        case 3:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "char " + entry.getKey() + " [100];\n");
                            break;
                        default:
                    }
                }
                banderaDeclaracionVariables = true;

            }

            if ((condigoParaCodigoIntermedio.get(i).equals("read")) || banderaRead == true) {

                if (condigoParaCodigoIntermedio.get(i).equals("read")) {
                    banderaRead = true;

                }

                if (condigoParaCodigoIntermedio.get(i - 1).equals("id")) {

                    int TD = tipoDato(condigoParaCodigoIntermedio.get(i));

                    switch (TD) {
                        case 0:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "scanf (\"%d\",&" + condigoParaCodigoIntermedio.get(i) + ");\n");
                            break;
                        case 1:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "scanf (\"%f\",&" + condigoParaCodigoIntermedio.get(i) + ");\n");
                            break;
                        case 2:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "scanf (\" %c\",&" + condigoParaCodigoIntermedio.get(i) + ");\n");
                            break;
                        case 3:
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "scanf (\"%s\"," + condigoParaCodigoIntermedio.get(i) + ");\n");
                            break;
                        default:
                            break;
                    }

                }

                if (condigoParaCodigoIntermedio.get(i).equals(";")) {
                    banderaRead = false;

                }

            }

            if ((condigoParaCodigoIntermedio.get(i).equals("print")) || banderaPrint == true) {

                if (condigoParaCodigoIntermedio.get(i).equals("print")) {

                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "printf ");
                    banderaPrint = true;
                }

                if (condigoParaCodigoIntermedio.get(i - 1).equals("litCad") || condigoParaCodigoIntermedio.get(i - 1).equals("id")) {
                    cosasDelPrint.add(condigoParaCodigoIntermedio.get(i));
                }

                if (condigoParaCodigoIntermedio.get(i).equals("[") && banderaPrint == true) {
                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "(");
                }
                if (condigoParaCodigoIntermedio.get(i).equals("]") && banderaPrint == true) {

                    for (int a = 0; a < cosasDelPrint.size(); a++) {
                        String element = cosasDelPrint.get(a);

                        String elm = element;

                        if (element.contains("\"")) {
                            String nuevaCadena = elm.substring(1, elm.length() - 1);

                            cadAuxiliarPrint = cadAuxiliarPrint + nuevaCadena;

                        } else {
                            int TD = tipoDato(elm);
                            switch (TD) {
                                case 0:
                                    cadAuxiliarPrint = cadAuxiliarPrint + "%d";
                                    break;
                                case 1:
                                    cadAuxiliarPrint = cadAuxiliarPrint + "%f";
                                    break;
                                case 2:
                                    cadAuxiliarPrint = cadAuxiliarPrint + "%c";
                                    break;
                                case 3:
                                    cadAuxiliarPrint = cadAuxiliarPrint + "%s";
                                    break;
                                default:

                            }

                        }
                    }
                    cadAuxiliarPrint = "\"" + cadAuxiliarPrint + "\\n\"";

                    for (int a = 0; a < cosasDelPrint.size(); a++) {
                        String element = cosasDelPrint.get(a);
                        if (!element.contains("\"")) {

                            cadAuxiliarPrint = cadAuxiliarPrint + "," + element;
                        }
                    }

                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + cadAuxiliarPrint + ");\n");
                    cadAuxiliarPrint = "";
                    cosasDelPrint.clear();
                }

                if (condigoParaCodigoIntermedio.get(i).equals(";")) {
                    banderaPrint = false;

                }

            }

            if (condigoParaCodigoIntermedio.get(i).equals("for") || banderaFor == true) {
                banderaIgual = true;
                banderaFor = true;
                codigoFor = codigoFor + condigoParaCodigoIntermedio.get(i) + " ";

                if (condigoParaCodigoIntermedio.get(i).equals("{")) {

                    banderaFor = false;
                    banderaIgual = false;

                    analizarForAsignacion(codigoFor, contadorAsignaciones, condigoParaCodigoIntermedio.get(i + 2));
                    contadorfor++;
                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "For" + contadorfor + ":\n");
                    pilaDeLlaves.push("for { " + contadorfor);

                    analizarForCondicion(codigoFor);
                    txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Fin_For" + contadorfor + ";\n");

                    analizarForIncremento(codigoFor);

                }

            }

            if (condigoParaCodigoIntermedio.get(i).equals("}")) {

                if (!pilaDeLlaves.isEmpty()) {
                    String utimoPila = pilaDeLlaves.peek();
                    String[] palabras = utimoPila.split(" ");
                    String primeraPalabra = palabras[0];
                    String segundaPalabra = palabras[1];
                    String terceraPalabra = palabras[2];

                    if (primeraPalabra.equals("if")) {

                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto End_If" + terceraPalabra + ";\n");
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "Else" + terceraPalabra + ":\n");
                        pilaDeLlaves.pop();
                        pilaDeLlaves.push("else } " + terceraPalabra);

                        if (!(condigoParaCodigoIntermedio.get(i + 2).equals("else"))) {
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto End_If" + terceraPalabra + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "End_If" + terceraPalabra + ":\n");
                            pilaDeLlaves.pop();
                        }
                    }

                    if (primeraPalabra.equals("else")) {
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto End_If" + terceraPalabra + ";\n");
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "End_If" + terceraPalabra + ":\n");
                        pilaDeLlaves.pop();

                    }

                    if (primeraPalabra.equals("for")) {

                        String utimoPilaIncremento = pilaDeIncrementos.peek();

                        String[] palabrasIncremento = utimoPilaIncremento.split(" ");
                        String primeraPalabraIncremento = palabrasIncremento[0];
                        String segundaPalabraIncremento = palabrasIncremento[1];

                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr1 = " + primeraPalabraIncremento + ";\n");
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr2 = 1;\n");
                        if (segundaPalabraIncremento.equals("++")) {
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr1 = VFr1+ VFr2;\n");
                        } else {
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "VFr1 = VFr1 - VFr2;\n");

                        }
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + primeraPalabraIncremento + " = VFr1;\n");

                        pilaDeIncrementos.pop();

                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto For" + terceraPalabra + ";\n");
                        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "Fin_For" + terceraPalabra + ":\n");
                        pilaDeLlaves.pop();

                    }

                }
            }

            if ((condigoParaCodigoIntermedio.get(i).equals("if")) || banderaIf == true) {
                if (condigoParaCodigoIntermedio.get(i).equals("if")) {
                    banderaIf = true;
                }

                condicionDelIf.add(condigoParaCodigoIntermedio.get(i));

                if (condigoParaCodigoIntermedio.get(i).equals("{")) {

                    contadorLlaves++;
                    pilaDeLlaves.push("if { " + contadorLlaves);
                    banderaIf = false;

                    int TD1 = tipoDato(condicionDelIf.get(2));
                    int TD2 = tipoDato(condicionDelIf.get(4));

                    if (TD1 == 0) {

                        if (conIf == 0) {
                            conIf = conG;
                            conIf++;
                            String V1 = "VIf" + conIf;

                            variableTemporalIF.add("VIf" + conIf);
                            variableTemporalIF2.add(TD1 + "");

                            conIf++;

                            String V2 = "VIf" + conIf;
                            variableTemporalIF.add("VIf" + conIf);
                            variableTemporalIF2.add(TD1 + "");

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                            conG = conIf;
                        } else {

                            List<Integer> posiciones = encontrarPosiciones(variableTemporalIF2, "0");
                            String V1 = variableTemporalIF.get(posiciones.get(0));
                            String V2 = variableTemporalIF.get(posiciones.get(1));

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                        }
                    }

                    if (TD1 == 1) {

                        if (conFlo == 0) {
                            conFlo = conG;
                            conFlo++;
                            String V1 = "VIf" + conFlo;

                            variableTemporalIF.add("VIf" + conFlo);
                            variableTemporalIF2.add(TD1 + "");

                            conFlo++;

                            String V2 = "VIf" + conFlo;
                            variableTemporalIF.add("VIf" + conFlo);
                            variableTemporalIF2.add(TD1 + "");

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                            conG = conFlo;
                        } else {

                            List<Integer> posiciones = encontrarPosiciones(variableTemporalIF2, "1");
                            String V1 = variableTemporalIF.get(posiciones.get(0));
                            String V2 = variableTemporalIF.get(posiciones.get(1));

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                        }
                    }

                    if (TD1 == 2) {

                        if (conChar == 0) {
                            conChar = conG;
                            conChar++;
                            String V1 = "VIf" + conChar;

                            variableTemporalIF.add("VIf" + conChar);
                            variableTemporalIF2.add(TD1 + "");

                            conChar++;

                            String V2 = "VIf" + conChar;
                            variableTemporalIF.add("VIf" + conChar);
                            variableTemporalIF2.add(TD1 + "");

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                            conG = conChar;
                        } else {

                            List<Integer> posiciones = encontrarPosiciones(variableTemporalIF2, "2");
                            String V1 = variableTemporalIF.get(posiciones.get(0));
                            String V2 = variableTemporalIF.get(posiciones.get(1));

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                        }
                    }

                    if (TD1 == 3) {

                        if (conStr == 0) {
                            conStr = conG;
                            conStr++;
                            String V1 = "VIf" + conStr;

                            variableTemporalIF.add("VIf" + conStr);
                            variableTemporalIF2.add(TD1 + "");

                            conStr++;

                            String V2 = "VIf" + conStr;
                            variableTemporalIF.add("VIf" + conStr);
                            variableTemporalIF2.add(TD1 + "");

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                            conG = conStr;
                        } else {

                            List<Integer> posiciones = encontrarPosiciones(variableTemporalIF2, "3");
                            String V1 = variableTemporalIF.get(posiciones.get(0));
                            String V2 = variableTemporalIF.get(posiciones.get(1));

                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + V1 + " = " + condicionDelIf.get(2) + ";\n" + V2 + " = " + condicionDelIf.get(4) + ";\n" + V1 + " = " + V1 + " " + condicionDelIf.get(3) + " " + V2 + ";\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "if ( ! " + V1 + " )\n");
                            txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "goto Else" + contadorLlaves + ";\n");

                        }
                    }

                    condicionDelIf.clear();
                    numeroMaxinoIfV = conG;

                }

            }

        }

        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "return 0;\n");
        txtCodigoIntermedio.setText(txtCodigoIntermedio.getText() + "}\n");

    }

    private static List<Integer> encontrarPosiciones(ArrayList<String> lista, String cadena) {
        List<Integer> posiciones = new ArrayList<>();

        for (int i = 0; i < lista.size(); i++) {
            if (lista.get(i).equals(cadena)) {
                posiciones.add(i);
            }
        }

        // Si la cadena no se encuentra, la lista estará vacía.
        return posiciones;
    }

    public int tipoDato(String variable) {
        int regresa;
        String claveBuscada = variable;
        if (mapaVariables.containsKey(claveBuscada)) {
            List<Integer> valor = mapaVariables.get(claveBuscada);
            regresa = valor.get(0);

        } else {

            regresa = -1;
        }

        return regresa;
    }

    public void operadoresValidacion() {

        int ValoresIgualdad[][] = {
            //        int     float    char     String
            /*int   */{0, -1, -1, -1},
            /*float */ {-1, 1, -1, -1},
            /*char  */ {-1, -1, 2, -1},
            /*String*/ {-1, -1, -1, 3,}
        };

        int ValoresOperadores[][] = {
            //        int     float    char     String
            /*int   */{0, -1, -1, -1},
            /*float */ {-1, 1, -1, -1},
            /*char  */ {-1, -1, -1, -1},
            /*String*/ {-1, -1, -1, -1,}
        };

        for (int i = 0; i < exprecionOperadorRelacional.size(); i = i + 4) {

            String variable1 = exprecionOperadorRelacional.get(i);
            String operadorRelacional = exprecionOperadorRelacional.get(i + 1);
            String variable2 = exprecionOperadorRelacional.get(i + 2);
            String linea = exprecionOperadorRelacional.get(i + 3);

            int elementoEnPosicion1 = mapaVariables.get(variable1).get(0);
            int elementoEnPosicion2 = mapaVariables.get(variable2).get(0);

            int valorIgualdad = ValoresIgualdad[elementoEnPosicion1][elementoEnPosicion2];
            int valorOperador = ValoresOperadores[elementoEnPosicion1][elementoEnPosicion2];
            if (operadorRelacional.equals("==") || operadorRelacional.equals("!=")) {
                if (valorIgualdad == -1) {
                    txtConsola.setText(txtConsola.getText() + "ERROR Semantico linea " + linea + ": Tipos de datos no compatibles.\n");
                    banderaError = false;

                }

            } else {

                if (valorOperador == -1) {
                    txtConsola.setText(txtConsola.getText() + "ERROR Semantico linea " + linea + ": Tipos de datos no compatibles.\n");

                    banderaError = false;
                }

            }

        }
    }

    public void AnalisisSemanticoPosicionPosfija() {

        String cadena, entrada, lexema, entrada2, datoTemporal = "", linea, expresionTemporal = "";
        String[] elementos;

        boolean banderaIgual = false;

        for (int i = 0; i < codigo.size(); i++) {

            cadena = codigo.get(i);
            elementos = cadena.split(" ");

            entrada = elementos[0];
            lexema = elementos[1];
            linea = elementos[2];

            if (entrada.equals("=")) {

                cadena = codigo.get(i - 1);
                elementos = cadena.split(" ");

                entrada2 = elementos[0];
                datoTemporal = entrada2;

                banderaIgual = true;

            } else if (banderaIgual == true && entrada.equals(";")) {
                banderaIgual = false;
                expresionInfija.add(datoTemporal + " " + expresionTemporal + linea);

                expresionTemporal = "";
            }
            if (banderaIgual) {

                expresionTemporal = expresionTemporal + entrada + " ";

            }

        }

    }

    public static String convertirArrayListAString(ArrayList<String> lista) {
        if (lista == null || lista.isEmpty()) {
            return "";
        }
        StringBuilder resultado = new StringBuilder();
        for (String elemento : lista) {
            resultado.append(elemento).append(" ");
        }
        resultado.deleteCharAt(resultado.length() - 1);
        return resultado.toString();
    }

    public void AnalisisSemanticoPosicionPosfijaInfija() {
        ArrayList<ArrayList<String>> listaPrincipal = new ArrayList<>();
        java.util.Stack<String> pilaOperadores = new java.util.Stack<String>();
        ArrayList<String> exprecion = new ArrayList<String>();

        for (int i = 0; i < expresionInfija.size(); i++) {

            String elemento = expresionInfija.get(i);

            String[] elementos = elemento.split(" ");
            ArrayList<String> arrayList = new ArrayList<>(Arrays.asList(elementos));

            String temporalVariable = arrayList.get(0);
            arrayList.remove(arrayList.size() - 1);
            arrayList.add(";");

            for (int a = 2; a < arrayList.size(); a++) {

                String eleme = arrayList.get(a);

                switch (eleme) {
                    case "(":
                        pilaOperadores.push(eleme);
                        break;

                    case ")":

                        while (!pilaOperadores.isEmpty() && !pilaOperadores.peek().equals("(")) {
                            exprecion.add(pilaOperadores.peek());

                            pilaOperadores.pop();
                        }

                        if (!pilaOperadores.isEmpty()) {
                            pilaOperadores.pop();
                        }
                        break;

                    case "-":
                    case "+":

                        if (pilaOperadores.isEmpty()) {
                            pilaOperadores.push(eleme);

                        } else {

                            switch (pilaOperadores.peek()) {
                                case "-" -> {
                                    exprecion.add(pilaOperadores.peek());
                                    pilaOperadores.pop();
                                    pilaOperadores.push(eleme);
                                }
                                case "+" -> {
                                    exprecion.add(pilaOperadores.peek());
                                    pilaOperadores.pop();
                                    pilaOperadores.push(eleme);
                                }
                                case "/" -> {
                                    exprecion.add(pilaOperadores.peek());
                                    pilaOperadores.pop();
                                    pilaOperadores.push(eleme);
                                }
                                case "*" -> {
                                    exprecion.add(pilaOperadores.peek());

                                    pilaOperadores.pop();

                                    if (!pilaOperadores.isEmpty()) {

                                        do {

                                            exprecion.add(pilaOperadores.peek());
                                            pilaOperadores.pop();
                                            pilaOperadores.push(eleme);
                                        } while (!(pilaOperadores.peek().equals(eleme)));

                                        break;

                                    }

                                    pilaOperadores.push(eleme);
                                }
                                default -> {
                                    pilaOperadores.push(eleme);
                                }
                            }
                        }
                        break;

                    case "/":
                    case "*":
                        if (pilaOperadores.isEmpty()) {
                            pilaOperadores.push(eleme);
                        } else {
                            switch (pilaOperadores.peek()) {
                                case "/" -> {
                                    exprecion.add(pilaOperadores.peek());
                                    pilaOperadores.pop();
                                    pilaOperadores.push(eleme);

                                }
                                case "*" -> {
                                    exprecion.add(pilaOperadores.peek());
                                    pilaOperadores.pop();
                                    pilaOperadores.push(eleme);

                                }
                                case "+" -> {
                                    pilaOperadores.push(eleme);

                                }
                                case "-" -> {
                                    pilaOperadores.push(eleme);
                                }
                                default -> {
                                    pilaOperadores.push(eleme);
                                }
                            }
                        }
                        break;

                    case ";":
                        while (!pilaOperadores.isEmpty()) {

                            String elementosFinal = pilaOperadores.pop();
                            exprecion.add(elementosFinal);

                        }
                        break;
                    default:

                        exprecion.add(eleme);
                }

            }

            TablaExpresiones.addRow(new Object[]{arrayList + "", exprecion + ""});

            expresionPofija.add(convertirArrayListAString(exprecion));

            listaPrincipal.add(exprecion);

            ArrayList<String> exprecionTipoDeDato = new ArrayList<String>();
            for (int b = 0; b < exprecion.size(); b++) {

                String elementoE = exprecion.get(b);
                try {
                    int numero = Integer.parseInt(elementoE);
                    elementoE = "int";
                } catch (NumberFormatException e) {
                }

                if (elementoE.contains(".") && !elementoE.contains("\"")) {
                    elementoE = "float";
                }

                if (elementoE.contains("\"")) {
                    elementoE = "String";
                }
                if (elementoE.contains("\'")) {
                    elementoE = "char";
                }

                switch (elementoE) {

                    case "int":
                        exprecionTipoDeDato.add("0");

                        break;
                    case "float":

                        exprecionTipoDeDato.add("1");
                        break;

                    case "char":

                        exprecionTipoDeDato.add("2");
                        break;
                    case "String":
                        exprecionTipoDeDato.add("3");

                        break;
                    case "*":
                    case "/":
                    case "+":
                    case "-":

                        exprecionTipoDeDato.add(elementoE);
                        break;
                    default:
                        List<Integer> tipoDelElemento = mapaVariables.get(elementoE);

                        Integer tipoD = tipoDelElemento.get(0);
                        exprecionTipoDeDato.add(tipoD + "");
                }
            }
            String ei = expresionInfija.get(i) + "";
            ArrayList<String> listaNum = new ArrayList<>(Arrays.asList(ei.split(" ")));
            String NumeroLineaExprecion = listaNum.get(listaNum.size() - 1);
            arrayList.subList(0, 2).clear();
            arrayList.remove(arrayList.size() - 1);
            ErroresCompatibleDatos(NumeroLineaExprecion, temporalVariable, arrayList, exprecion, exprecionTipoDeDato);
            exprecion.clear();

            pilaOperadores.clear();
        }

    }

    public void ErroresCompatibleDatos(String numeorLinea, String variableTemporal, ArrayList<String> expresionInfija, ArrayList<String> expresionPosfija, ArrayList<String> exprecionTipos) {

        List<Integer> valorRecuperado = mapaVariables.get(variableTemporal);
        String val = valorRecuperado.get(0) + "";

        java.util.Stack<String> pilaTipoDeDato = new java.util.Stack<String>();
        int ValoresVariables[][] = {
            //        int     float    char     String
            /*int   */{0, 1, -1, -1},
            /*float */ {1, 1, -1, -1},
            /*char  */ {-1, -1, -1, -1},
            /*String*/ {-1, -1, -1, -1,}
        };

        for (int i = 0; i < exprecionTipos.size(); i++) {

            String elementoPilaS = exprecionTipos.get(i);

            switch (elementoPilaS) {
                case "0":
                    pilaTipoDeDato.push(elementoPilaS);
                    break;
                case "1":
                    pilaTipoDeDato.push(elementoPilaS);
                    break;
                case "2":
                    pilaTipoDeDato.push(elementoPilaS);
                    break;

                case "3":
                    pilaTipoDeDato.push(elementoPilaS);
                    break;
                case "-":
                case "+":
                case "*":
                case "/":

                    if (pilaTipoDeDato.size() >= 2) {

                        String elemento1 = pilaTipoDeDato.pop();
                        String elemento2 = pilaTipoDeDato.pop();

                        int entero1 = Integer.parseInt(elemento1);
                        int entero2 = Integer.parseInt(elemento2);

                        int valorEnPosicion = ValoresVariables[entero2][entero1];

                        if (valorEnPosicion == (-1)) {
                            txtConsola.setText(txtConsola.getText() + "ERROR Sintactico linea " + numeorLinea + ": Tipos de datos no compatibles\n");
                            banderaError = false;
                            break;
                        }
                        pilaTipoDeDato.push(valorEnPosicion + "");
                    }
                    break;
                default:
            }
        }

        int ValoresVariablesIgual[][] = {
            //        int     float    char
            /*int   */{0, 1, -1, -1},
            /*float */ {1, 1, -1, -1},
            /*char  */ {-1, -1, 2, -1},
            /*Stirng */ {-1, -1, -1, 3}
        };

        if (!pilaTipoDeDato.isEmpty()) {

            List<Integer> tipoDelElemento = mapaVariables.get(variableTemporal);

            Integer tipoD = tipoDelElemento.get(0);

            String elemento1 = pilaTipoDeDato.pop();

            int entero1 = Integer.parseInt(elemento1);
            int entero2 = Integer.parseInt(tipoD + "");

            int valorEnPosicion = ValoresVariablesIgual[entero2][entero1];
            if (valorEnPosicion == (-1)) {

                txtConsola.setText(txtConsola.getText() + "ERROR Sintactico linea " + numeorLinea + ": Tipos de datos no compatibles\n");
                banderaError = false;

            }

        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGuardarComo = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtComponentes = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaSintactica = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaExpresiones = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaVariables = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtCodigoIntermedio = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtCodigoFuente = new javax.swing.JTextPane();
        espaciador = new javax.swing.JLabel();
        espaciador1 = new javax.swing.JLabel();
        espaciador2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador RACG");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo (4).png"))); // NOI18N
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.setFocusPainted(false);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 50, 47));

        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/abrir-documento (1).png"))); // NOI18N
        btnAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAbrir.setFocusPainted(false);
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        getContentPane().add(btnAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 50, 47));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disquete (3).png"))); // NOI18N
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setFocusPainted(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 50, 47));

        btnGuardarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disco-flexible.png"))); // NOI18N
        btnGuardarComo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardarComo.setFocusPainted(false);
        btnGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarComoActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardarComo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 50, 47));

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/limpiar.png"))); // NOI18N
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.setFocusPainted(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 10, 50, 47));

        btnAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/jugar (2).png"))); // NOI18N
        btnAnalizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnalizar.setFocusPainted(false);
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 10, 50, 47));

        txtComponentes.setEditable(false);
        txtComponentes.setColumns(20);
        txtComponentes.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        txtComponentes.setRows(5);
        jScrollPane2.setViewportView(txtComponentes);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 70, 400, 340));

        txtConsola.setColumns(20);
        txtConsola.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        txtConsola.setRows(5);
        jScrollPane3.setViewportView(txtConsola);

        jTabbedPane1.addTab("Errores", jScrollPane3);

        tablaSintactica.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        tablaSintactica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tablaSintactica);

        jTabbedPane1.addTab("Pila", jScrollPane4);

        tablaExpresiones.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        tablaExpresiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tablaExpresiones);

        jTabbedPane1.addTab("Expresion posfija", jScrollPane5);

        tablaVariables.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        tablaVariables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tablaVariables);

        jTabbedPane1.addTab("Variables", jScrollPane6);

        txtCodigoIntermedio.setColumns(20);
        txtCodigoIntermedio.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        txtCodigoIntermedio.setRows(5);
        jScrollPane7.setViewportView(txtCodigoIntermedio);

        jTabbedPane1.addTab("Codigo Intermedio", jScrollPane7);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, 1030, 190));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrar (2).png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 10, 50, 47));

        txtCodigoFuente.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jScrollPane8.setViewportView(txtCodigoFuente);

        getContentPane().add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 71, 610, 340));
        getContentPane().add(espaciador, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 20, 20));
        getContentPane().add(espaciador1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 620, 20, 20));
        getContentPane().add(espaciador2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 40, 20, 20));

        jMenu1.setText("Archivo");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo (4).png"))); // NOI18N
        jMenuItem2.setText("Nuevo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/abrir-documento (1).png"))); // NOI18N
        jMenuItem3.setText("Abrir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disquete (3).png"))); // NOI18N
        jMenuItem4.setText("Guardar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disco-flexible.png"))); // NOI18N
        jMenuItem5.setText("Guardar como");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/limpiar.png"))); // NOI18N
        jMenuItem6.setText("Limpiar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrar (2).png"))); // NOI18N
        jMenuItem7.setText("Cerrar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ejecutar");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/jugar (2).png"))); // NOI18N
        jMenuItem1.setText("Analizar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        analizar();
    }//GEN-LAST:event_btnAnalizarActionPerformed


    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        Abrir();
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarComoActionPerformed
        GuardarComo();
    }//GEN-LAST:event_btnGuardarComoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        Limpiar();
        txtCodigoFuente.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        Nuevo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Cerrar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked

    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        analizar();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Abrir();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        Cerrar();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        Limpiar();
        txtCodigoFuente.setText("");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        GuardarComo();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Guardar();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Nuevo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        }
        catch(ClassNotFoundException ex){
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    public void analizar() {
        Limpiar();
        TablasModelo();
        Lexico();
        eliminarElementosSeparadosPorSaltoDeLinea(txtConsola);

        try {
            AnalisisSemanticoLlenadoMatrizElemtos();

        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (banderaError) {
            AnalisisSemanticoVariables();
            eliminarElementosSeparadosPorSaltoDeLinea(txtConsola);

        }

        if (banderaError) {
            AnalisisSemanticoPosicionPosfija();

            AnalisisSemanticoPosicionPosfijaInfija();
        }
        if (banderaError) {
            operadoresValidacion();
        }

        if (banderaError) {
            codigoIntermedio();
            codigoIntermedio2();
            declaracionDeVariablesTemporales();
        }

        if (banderaError) {
            Color verdeOscuro = new Color(0, 128, 0);
            txtConsola.setForeground(verdeOscuro);
            txtConsola.setText(txtConsola.getText() + "ANALISIS CORRECTO (total time: 1 second)\n");
        }

    }

    private void Limpiar() {

        txtConsola.setForeground(Color.BLACK);
        numeroMaxino.clear();
        numeroMaxinoForV.clear();
        variableTemporalIF.clear();
        variableTemporalIF2.clear();
        condigoParaCodigoIntermedio.clear();
        Renglon = 0;
        Columna = 0;
        penultimo = 0;
        txtComponentes.setText("");
        txtConsola.setText("");
        numeroLineaError = 1;
        pilaSintactica.clear();
        banderaError = true;
        LineaAnalisisSemanticoLlenadoMatrizElemtos = 1;
        codigo.clear();
        mapaVariables.clear();
        exprecionOperadorRelacional.clear();
        expresionInfija.clear();
        txtCodigoIntermedio.setText("");
        expresionPofija.clear();
        TablasModelo();

    }

    private void Abrir() {
        try {
            jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            jfc.setFileFilter(filtro);
            int result = jfc.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                ruta = selectedFile.getAbsolutePath();
                setTitle(selectedFile.getName() + " - LDA IDE"); // Establecer el nombre del archivo en la barra del JFrame

                try {
                    output = new FileOutputStream(ruta, true);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error en el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
                }

                String contenido = "";
                byte datos[] = new byte[30];
                int leidos = 0;

                try {
                    input = new FileInputStream(ruta);
                    do {
                        leidos = input.read(datos);
                        if (leidos != -1) {
                            contenido += new String(datos, 0, leidos);
                        }
                    } while (leidos != -1);
                    input.close();
                    output.close();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error en el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
                }

                txtCodigoFuente.setText(contenido);
                txtCodigoFuente.setEnabled(true);
                btnNuevo.setEnabled(false);
                btnAbrir.setEnabled(false);
                btnGuardar.setEnabled(true);
                btnGuardarComo.setEnabled(true);
                btnAnalizar.setEnabled(true);
                btnLimpiar.setEnabled(true);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GuardarComo() {
        try {
            String contenido = txtCodigoFuente.getText();
            jfc = new JFileChooser();
            jfc.setSelectedFile(new File("Nuevo Programa.lda"));
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            jfc.setFileFilter(filtro);
            int opcion = jfc.showSaveDialog(this);
            ruta = jfc.getSelectedFile().toString();
            File archivo = jfc.getSelectedFile();
            if (opcion == JFileChooser.APPROVE_OPTION) {
                if (archivo.exists()) {
                    int resultado = JOptionPane.showConfirmDialog(this,
                            "Ya existe un archivo con el mismo nombre ¿Desea sobrescribirlo?", "Archivo ya existe",
                            JOptionPane.YES_NO_OPTION);
                    if (resultado == JOptionPane.YES_OPTION)
                    try {
                        output = new FileOutputStream(ruta);
                        output.write(contenido.getBytes());
                        output.close();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Error en el archivo", "ERROR",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        this.GuardarComo();
                    }
                } else
                try {
                    output = new FileOutputStream(ruta);
                    output.write(contenido.getBytes());
                    output.close();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error en el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Nuevo() {
        txtCodigoFuente.setEnabled(true);
        txtCodigoFuente.setText("");
        btnAnalizar.setEnabled(true);
        btnNuevo.setEnabled(false);
        btnAbrir.setEnabled(false);
        btnGuardar.setEnabled(true);
        btnGuardarComo.setEnabled(true);
    }

    private void Guardar() {
        try {
            String contenido = txtCodigoFuente.getText();
            if (ruta.isEmpty()) {
                this.GuardarComo();
            }
            try {
                output = new FileOutputStream(ruta);
                output.write(contenido.getBytes());
                output.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error en el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el archivo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Cerrar() {
        int resultado = JOptionPane.showConfirmDialog(this, "¿Desea guardar antes de cerrar el archivo?", "Aviso",
                JOptionPane.YES_NO_OPTION);
        if (resultado == JOptionPane.YES_OPTION) {
            if (ruta.isEmpty()) {
                this.GuardarComo();
            } else {
                this.Guardar();
            }
        }
        txtCodigoFuente.setEnabled(false);
        txtCodigoFuente.setText("");
        txtConsola.setText("");
        txtComponentes.setText("");
        btnNuevo.setEnabled(true);
        btnAbrir.setEnabled(true);
        btnGuardar.setEnabled(false);
        btnGuardarComo.setEnabled(false);
        // btnLimpiar.setEnabled(false);
        ruta = "";
    }

    /////////////////////Metodos auxiliares para el sintactico semantico y lexico ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static String eliminarElementosRepetidosEnSeEsperaba(String input) {
        String[] elementos = input.split(" ");
        LinkedHashSet<String> set = new LinkedHashSet<>(Arrays.asList(elementos));
        String[] elementosUnicos = set.toArray(new String[0]);
        String resultado = String.join(" ", elementosUnicos);
        return resultado;
    }

    private void eliminarElementosSeparadosPorSaltoDeLinea(JTextArea textArea) {
        String texto = textArea.getText();
        String[] lineas = texto.split("\\n");
        String textoSinDuplicados = String.join("\n", eliminarDuplicados(lineas));
        textArea.setText(textoSinDuplicados);
    }

    private String[] eliminarDuplicados(String[] array) {
        java.util.List<String> lista = new java.util.ArrayList<>();
        for (String elemento : array) {
            if (!lista.contains(elemento)) {
                lista.add(elemento);
            }
        }
        return lista.toArray(new String[0]);
    }

    public static int CadenaAEntero(String cadena) {
        String digitos = "";
        for (int i = 0; i < cadena.length(); i++) {
            char caracter = cadena.charAt(i);
            if (Character.isDigit(caracter)) {
                digitos += caracter;
            }
        }
        if (digitos.isEmpty()) {
            throw new IllegalArgumentException("La cadena no contiene dígitos.");
        }
        return Integer.parseInt(digitos);
    }

    // Método que busca la posición del token dentro de encabezadosColumnas y devuelve su posición
    public int Columna(String token) {
        for (int i = 0; i < Columnas.length; i++) {
            if (token.equals(Columnas[i])) {
                Columna = i;
                break;
            }
        }
        return Columna;
    }

    public int Renglon() {
        for (int i = 0; i < Renglones.length; i++) {
            if (Renglones[i].equals(pilaSintactica.peek())) {
                Renglon = i;
                break;
            }
        }
        return Renglon;
    }

    public int penultimo() {
        for (int i = 0; i < Renglones.length; i++) {
            if (Renglones[i].equals(pilaSintactica.get(pilaSintactica.size() - 2))) {
                penultimo = i;
                break;
            }
        }
        return penultimo;
    }

    public static int obtenerNumeroMasAlto(ArrayList<Integer> lista) {
        if (lista == null || lista.isEmpty()) {
            throw new IllegalArgumentException("La lista no puede estar vacía");
        }
        int maximo = lista.get(0);
        for (int i = 1; i < lista.size(); i++) {
            int actual = lista.get(i);
            if (actual > maximo) {
                maximo = actual;
            }
        }
        return maximo;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarComo;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel espaciador;
    private javax.swing.JLabel espaciador1;
    private javax.swing.JLabel espaciador2;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablaExpresiones;
    private javax.swing.JTable tablaSintactica;
    private javax.swing.JTable tablaVariables;
    private javax.swing.JTextPane txtCodigoFuente;
    private javax.swing.JTextArea txtCodigoIntermedio;
    private javax.swing.JTextArea txtComponentes;
    private javax.swing.JTextArea txtConsola;
    // End of variables declaration//GEN-END:variables
}
